import React, { useState, useEffect, useRef } from 'react';
import Router, { useRouter } from 'next/router';
import Head from 'next/head';
import axios from 'axios';
import styles from '../styles/Home.module.css';
import getTopTracks from '../helpers/get-top-tracks';
import getUserInfo from '../helpers/get-user-info';
import createPlayList from '../helpers/create-playlist';
import addTracksToPlaylist from '../helpers/add-tracks-to-playlist';
import getArtistGenres from '../helpers/get-artist-genres';
import RelatedArtists from '../components/RelatedArtists';
import GenresList from '../components/GenresList';
import setSessionStorageItem from '../helpers/set-session-storage-item';
import CreatePlaylistBtn from '../components/CreatePlaylistBtn';
import Notification from '../components/Notification';

const getClientToken = clientToken =>
  axios.get('http://localhost:3000/api/getClientToken').then(({ data }) => {
    // eslint-disable-next-line no-param-reassign
    clientToken.current = data.clientToken;
  });

const Home = () => {
  const router = useRouter();
  const clientToken = useRef(null);
  const [accessToken, setAccessToken] = useState(null);
  const [artist, setArtist] = useState(null);
  const [genres, setGenres] = useState(null);
  const [selectedGenre, setSelectedGenre] = useState(null);
  const [relatedArtists, setRelatedArtists] = useState(null);
  const [notification, setNotification] = useState(null);
  useEffect(() => {
    if (router.query.accessToken) {
      setAccessToken(router.query.accessToken);
      Router.push({ pathname: '/' });
    }
  }, []);

  useEffect(() => {
    if (accessToken) {
      const { sessionStorage } = window;
      const sessionArtist = sessionStorage.getItem('artist');
      const sessionSelectedGenre = sessionStorage.getItem('selectedGenre');
      const sessionGenres = sessionStorage.getItem('genres');
      const sessionRelatedArtists = sessionStorage.getItem('relatedArtists');
      if (sessionSelectedGenre) {
        setSelectedGenre(JSON.parse(sessionSelectedGenre));
      }
      if (sessionArtist) {
        setArtist(JSON.parse(sessionArtist));
      }
      if (sessionGenres) {
        setGenres(JSON.parse(sessionGenres));
      }
      if (sessionRelatedArtists) {
        setRelatedArtists(JSON.parse(sessionRelatedArtists));
      }
    }
  }, [accessToken]);

  useEffect(async () => {
    if (accessToken && relatedArtists && selectedGenre) {
      getUserInfo(accessToken).then(({ id, country: market }) =>
        createPlayList({ id, selectedGenre, accessToken }).then(
          async ({ data: { id: playListId } }) => {
            const tracks = await getTopTracks({
              relatedArtists,
              accessToken,
              market
            });
            addTracksToPlaylist({
              playListId,
              tracks,
              accessToken,
              setNotification
            });
          }
        )
      );
    }
  }, [accessToken, relatedArtists, selectedGenre]);

  const onFormSubmit = async e => {
    e.preventDefault();

    const form = new FormData(e.target);
    const formArtist = form.get('artist');
    setArtist(formArtist);
    setSessionStorageItem('artist', formArtist);

    if (!clientToken.current) {
      await getClientToken(clientToken);
    }

    getArtistGenres({ formArtist, clientToken, setGenres });
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Sups</h1>
        <form onSubmit={onFormSubmit}>
          <input name='artist' type='text' defaultValue={artist} required />
          <button type='submit'>search</button>
        </form>
        <GenresList
          genres={genres}
          setSelectedGenre={setSelectedGenre}
          clientToken={clientToken}
          setRelatedArtists={setRelatedArtists}
        />
        <RelatedArtists artists={relatedArtists} />
        <CreatePlaylistBtn
          relatedArtists={relatedArtists}
          selectedGenre={selectedGenre}
        />

        <Notification notification={notification} />
      </main>

      <footer className={styles.footer}>
        <h2>Floop</h2>
      </footer>
    </div>
  );
};

export default Home;
