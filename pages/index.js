import React, { useState, useEffect, useRef } from 'react';
import Router, { useRouter } from 'next/router';
import Head from 'next/head';
import getTopTracks from '../helpers/get-top-tracks';
import getUserInfo from '../helpers/get-user-info';
import createPlayList from '../helpers/create-playlist';
import addTracksToPlaylist from '../helpers/add-tracks-to-playlist';
import getArtistInfo from '../helpers/get-artist-info';
import RelatedArtists from '../components/RelatedArtists';
import GenresList from '../components/GenresList';
import setSessionStorageItem from '../helpers/set-session-storage-item';
import Notification from '../components/Notification';
import getRelatedArtists from '../helpers/get-related-artists';
import getClientToken from '../helpers/get-client-token';

const Home = () => {
  const router = useRouter();
  const clientToken = useRef(null);
  const [accessToken, setAccessToken] = useState(null);
  const [artist, setArtist] = useState(null);
  const [genres, setGenres] = useState(null);
  const [selectedGenre, setSelectedGenre] = useState(null);
  const [relatedArtists, setRelatedArtists] = useState(null);
  const [notification, setNotification] = useState(null);

  useEffect(() => {
    if (router.query.accessToken) {
      setAccessToken(router.query.accessToken);
      Router.push('/#related', undefined, { shallow: true });
    }
  }, []);

  useEffect(() => {
    if (accessToken) {
      const { sessionStorage } = window;
      const sessionArtist = sessionStorage.getItem('artist');
      const sessionSelectedGenre = sessionStorage.getItem('selectedGenre');
      const sessionGenres = sessionStorage.getItem('genres');
      const sessionRelatedArtists = sessionStorage.getItem('relatedArtists');
      if (sessionSelectedGenre) {
        setSelectedGenre(JSON.parse(sessionSelectedGenre));
      }
      if (sessionArtist) {
        setArtist(JSON.parse(sessionArtist));
      }
      if (sessionGenres) {
        setGenres(JSON.parse(sessionGenres));
      }
      if (sessionRelatedArtists) {
        setRelatedArtists(JSON.parse(sessionRelatedArtists));
      }
    }
  }, [accessToken]);

  useEffect(async () => {
    if (accessToken && relatedArtists && selectedGenre) {
      getUserInfo({ accessToken, setNotification }).then(
        ({ id, country: market }) =>
          createPlayList({
            id,
            selectedGenre,
            accessToken,
            setNotification
          }).then(async ({ data: { id: playListId } }) => {
            const tracks = await getTopTracks({
              relatedArtists,
              accessToken,
              market,
              setNotification
            });
            addTracksToPlaylist({
              playListId,
              tracks,
              accessToken,
              setNotification
            });
          })
      );
    }
  }, [accessToken, relatedArtists, selectedGenre]);

  const onFormSubmit = async e => {
    e.preventDefault();
    const formArtist = new FormData(e.target).get('artist');

    if (!clientToken.current) {
      await getClientToken(clientToken);
    }

    await getArtistInfo({
      formArtist,
      clientToken,
      setGenres,
      setNotification,
      setArtist
    });

    Router.push('/#genres', undefined, { shallow: true });
  };

  const onGenreClick = async genre => {
    setSelectedGenre(genre);
    setSessionStorageItem('selectedGenre', genre);

    if (!clientToken.current) {
      await getClientToken(clientToken);
    }

    await getRelatedArtists({
      genre,
      clientToken,
      setRelatedArtists,
      setNotification
    });

    Router.push('/#related', undefined, { shallow: true });
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link
          href='https://fonts.googleapis.com/css?family=Rubik:300,400,500'
          rel='stylesheet'
        />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main>
        <section
          id='first-section'
          className='flex-container'
          style={{
            backgroundImage:
              'linear-gradient(transparent,#000), linear-gradient(90deg, #ffec00, #ff00A6)'
          }}
        >
          <div className='flex-item welcome-message'>
            <h3>Start browsing</h3>
            <h1>your music taste.</h1>
            <h2>What's your favourite artist's genre?</h2>
          </div>
          <div className='flex-item search-block'>
            <form onSubmit={onFormSubmit}>
              <input name='artist' type='text' defaultValue={artist} required />
              <button type='submit' style={{ backgroundColor: '#FFEC00' }}>
                search
              </button>
            </form>
          </div>
        </section>
        <GenresList
          genres={genres}
          onGenreClick={onGenreClick}
          artist={artist}
        />
        <RelatedArtists
          genre={selectedGenre}
          artists={relatedArtists}
          relatedArtists={relatedArtists}
        />
        <Notification notification={notification} />
      </main>
    </div>
  );
};

export default Home;
